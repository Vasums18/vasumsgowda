
#include<stdio.h>
#include<stdlib.h>
struct node
{
int info;
struct node*llink,*rlink;
};
typedef struct node *NODE;
NODE insert(NODE root,int item)
{
NODE cur,prev,temp;
temp=(NODE)malloc(sizeof(struct node));
temp->info=item;
temp->llink=temp->rlink=NULL;
if(root==NULL)
return temp;
cur=root;
while(cur!=NULL)
{
prev=cur;
if(cur->info==item)
{
printf("element already exist\n");
free(temp);
return root;
}
if(cur->info<item)
cur=cur->rlink;
else
cur=cur->llink;
}
if(prev->info<item)
prev->rlink=temp;
else
prev->llink=temp;
return root;
}
void preorder(NODE root)
{
if(root==NULL)
return;
printf("%d",root->info);
preorder(root->llink);
preorder(root->rlink);
}
void inorder(NODE root)
{
if(root==NULL)
return;
inorder(root->llink);
printf("%d",root->info);
inorder(root->rlink);
}
void postorder(NODE root)
{
if(root==NULL)
return;
postorder(root->llink);
postorder(root->rlink);
printf("%d",root->info);
}
void search(NODE root,int key)
{
NODE cur;
if(root==NULL)
{
printf("tree is empty\n");
return;
}
cur=root;
while(cur!=NULL)
{
if(cur->info==key)
{
printf("key is element found");
return;
}
if(cur->info<key)
cur=cur->rlink;
else
cur=cur->llink;
}
printf("key not found\n");
}
void main()
{
int ch,item,key,x;
NODE root;
root=NULL;
while(1)
{
printf("1.insert to bst\n2.inorder traversing\n3.preorder traversing\n4.postorder traversing\n5.search bst\n6.exit\n");
printf("\n enter your choice:");
scanf("%d",&ch);
switch(ch)
{
case 1:do
{
printf("enter the item to be inserted \n");
scanf("%d",&item);
root=insert(root,item);
printf("enter to 1 continue 0 to exit");
scanf("%d",&x);
}
while(x);
{
break;
case 2:inorder(root);
break;
case 3:preorder(root);
break;
case 4:postorder(root);
break;
case 5:printf("enter the key element to be searched\n");
scanf("%d",&key);
search(root,key);
break;
case 6:exit(0);
default:printf("enter a  valid choice");
break;
}
}
}
}
